
AVRASM ver. 2.1.30  D:\uni\riz\LCD\Name-z\code\Debug\List\z.asm Mon Oct 30 01:40:45 2023

D:\uni\riz\LCD\Name-z\code\Debug\List\z.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\uni\riz\LCD\Name-z\code\Debug\List\z.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\uni\riz\LCD\Name-z\code\Debug\List\z.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004d 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000033 6552
000034 617a
000035 0000
000036 0000      	.DB  0x52,0x65,0x7A,0x61,0x0,0x0,0x0,0x0
000037 0000
000038 0000
000039 0000
00003a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
D:\uni\riz\LCD\Name-z\code\Debug\List\z.asm(1130): warning: .cseg .db misalignment - padding zero byte
00003b 0000      	.DB  0x0
                 _0x0:
00003c 6552
00003d 617a
D:\uni\riz\LCD\Name-z\code\Debug\List\z.asm(1132): warning: .cseg .db misalignment - padding zero byte
00003e 0000      	.DB  0x52,0x65,0x7A,0x61,0x0
                 _0x2000003:
00003f c080      	.DB  0x80,0xC0
                 _0x2040060:
D:\uni\riz\LCD\Name-z\code\Debug\List\z.asm(1136): warning: .cseg .db misalignment - padding zero byte
000040 0001      	.DB  0x1
                 _0x2040000:
000041 4e2d
000042 4e41
000043 4900
000044 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\uni\riz\LCD\Name-z\code\Debug\List\z.asm(1139): warning: .cseg .db misalignment - padding zero byte
000045 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000046 0002      	.DW  0x02
000047 0260      	.DW  __base_y_G100
000048 007e      	.DW  _0x2000003*2
                 
000049 0001      	.DW  0x01
00004a 0264      	.DW  __seed_G102
00004b 0080      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
00004c 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004d 94f8      	CLI
00004e 27ee      	CLR  R30
00004f bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000050 e0f1      	LDI  R31,1
000051 bffb      	OUT  GICR,R31
000052 bfeb      	OUT  GICR,R30
000053 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000054 e08d      	LDI  R24,(14-2)+1
000055 e0a2      	LDI  R26,2
000056 27bb      	CLR  R27
                 __CLEAR_REG:
000057 93ed      	ST   X+,R30
000058 958a      	DEC  R24
000059 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005b e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005c e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00005d 93ed      	ST   X+,R30
00005e 9701      	SBIW R24,1
00005f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000060 e8ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000061 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000062 9185      	LPM  R24,Z+
000063 9195      	LPM  R25,Z+
000064 9700      	SBIW R24,0
000065 f061      	BREQ __GLOBAL_INI_END
000066 91a5      	LPM  R26,Z+
000067 91b5      	LPM  R27,Z+
000068 9005      	LPM  R0,Z+
000069 9015      	LPM  R1,Z+
00006a 01bf      	MOVW R22,R30
00006b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006c 9005      	LPM  R0,Z+
00006d 920d      	ST   X+,R0
00006e 9701      	SBIW R24,1
00006f f7e1      	BRNE __GLOBAL_INI_LOOP
000070 01fb      	MOVW R30,R22
000071 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000072 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000073 bfed      	OUT  SPL,R30
000074 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000075 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000076 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000077 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000078 940c 007a 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void main(void)
                 ; 0000 000D {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 000E char str[17] = "Reza";
                 ; 0000 000F 
                 ; 0000 0010 int i,j,k;
                 ; 0000 0011 
                 ; 0000 0012 DDRA=0x00;
00007a 9761      	SBIW R28,17
00007b e181      	LDI  R24,17
00007c e0a0      	LDI  R26,LOW(0)
00007d e0b0      	LDI  R27,HIGH(0)
00007e e6e6      	LDI  R30,LOW(_0x3*2)
00007f e0f0      	LDI  R31,HIGH(_0x3*2)
000080 940e 01c0 	CALL __INITLOCB
                 ;	str -> Y+0
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	k -> R20,R21
000082 e0e0      	LDI  R30,LOW(0)
000083 bbea      	OUT  0x1A,R30
                 ; 0000 0013 PORTA=0x00;
000084 bbeb      	OUT  0x1B,R30
                 ; 0000 0014 DDRB=0x00;
000085 bbe7      	OUT  0x17,R30
                 ; 0000 0015 PORTB=0x00;
000086 bbe8      	OUT  0x18,R30
                 ; 0000 0016 DDRC=0x00;
000087 bbe4      	OUT  0x14,R30
                 ; 0000 0017 PORTC=0x00;
000088 bbe5      	OUT  0x15,R30
                 ; 0000 0018 DDRD=0x00;
000089 bbe1      	OUT  0x11,R30
                 ; 0000 0019 PORTD=0x00;
00008a bbe2      	OUT  0x12,R30
                 ; 0000 001A 
                 ; 0000 001B 
                 ; 0000 001C lcd_init(16*2);
00008b e2a0      	LDI  R26,LOW(32)
00008c d0be      	RCALL _lcd_init
                 ; 0000 001D 
                 ; 0000 001E while (1)
                 _0x4:
                 ; 0000 001F       {
                 ; 0000 0020         for(j = 0; j < 4; j++){
                +
00008d e020     +LDI R18 , LOW ( 0 )
00008e e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x8:
                +
00008f 3024     +CPI R18 , LOW ( 4 )
000090 e0e0     +LDI R30 , HIGH ( 4 )
000091 073e     +CPC R19 , R30
                 	__CPWRN 18,19,4
000092 f00c      	BRLT PC+2
000093 c040      	RJMP _0x9
                 ; 0000 0021             for(i = 15; i >= j ; i--){
                +
000094 e00f     +LDI R16 , LOW ( 15 )
000095 e010     +LDI R17 , HIGH ( 15 )
                 	__GETWRN 16,17,15
                 _0xB:
                +
000096 1702     +CP R16 , R18
000097 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
000098 f1c4      	BRLT _0xC
                 ; 0000 0022                 if(j % 2 == 0){
000099 01d9      	MOVW R26,R18
00009a 940e 0178 	CALL SUBOPT_0x0
00009c f469      	BRNE _0xD
                 ; 0000 0023                     if(i % 2 == 0){
00009d 01d8      	MOVW R26,R16
00009e 940e 0178 	CALL SUBOPT_0x0
0000a0 f419      	BRNE _0xE
                 ; 0000 0024                         lcd_gotoxy(i,0);
0000a1 930a      	ST   -Y,R16
0000a2 e0a0      	LDI  R26,LOW(0)
0000a3 c002      	RJMP _0x1B
                 ; 0000 0025                         lcd_putchar(str[j]);
                 ; 0000 0026 
                 ; 0000 0027                     }else{
                 _0xE:
                 ; 0000 0028                         lcd_gotoxy(i,1);
0000a4 930a      	ST   -Y,R16
0000a5 e0a1      	LDI  R26,LOW(1)
                 _0x1B:
0000a6 d063      	RCALL _lcd_gotoxy
                 ; 0000 0029                         lcd_putchar(str[j]);
0000a7 940e 017e 	CALL SUBOPT_0x1
                 ; 0000 002A                     }
                 ; 0000 002B                 }else{
0000a9 c00c      	RJMP _0x10
                 _0xD:
                 ; 0000 002C                     if(i % 2 == 0){
0000aa 01d8      	MOVW R26,R16
0000ab 940e 0178 	CALL SUBOPT_0x0
0000ad f419      	BRNE _0x11
                 ; 0000 002D                         lcd_gotoxy(i,1);
0000ae 930a      	ST   -Y,R16
0000af e0a1      	LDI  R26,LOW(1)
0000b0 c002      	RJMP _0x1C
                 ; 0000 002E                         lcd_putchar(str[j]);
                 ; 0000 002F 
                 ; 0000 0030                     }else{
                 _0x11:
                 ; 0000 0031                         lcd_gotoxy(i,0);
0000b1 930a      	ST   -Y,R16
0000b2 e0a0      	LDI  R26,LOW(0)
                 _0x1C:
0000b3 d056      	RCALL _lcd_gotoxy
                 ; 0000 0032                         lcd_putchar(str[j]);
0000b4 940e 017e 	CALL SUBOPT_0x1
                 ; 0000 0033                     }
                 ; 0000 0034                 }
                 _0x10:
                 ; 0000 0035 
                 ; 0000 0036                 if(j != 0){
0000b6 2e02      	MOV  R0,R18
0000b7 2a03      	OR   R0,R19
0000b8 f081      	BREQ _0x13
                 ; 0000 0037                     for(k = 0; k < j; k++){
                +
0000b9 e040     +LDI R20 , LOW ( 0 )
0000ba e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x15:
                +
0000bb 1742     +CP R20 , R18
0000bc 0753     +CPC R21 , R19
                 	__CPWRR 20,21,18,19
0000bd f45c      	BRGE _0x16
                 ; 0000 0038                         lcd_gotoxy(k,0);
0000be 934a      	ST   -Y,R20
0000bf e0a0      	LDI  R26,LOW(0)
0000c0 d049      	RCALL _lcd_gotoxy
                 ; 0000 0039                         lcd_putchar(str[k]);
0000c1 01de      	MOVW R26,R28
0000c2 0fa4      	ADD  R26,R20
0000c3 1fb5      	ADC  R27,R21
0000c4 91ac      	LD   R26,X
0000c5 d05d      	RCALL _lcd_putchar
                 ; 0000 003A                     }
                +
0000c6 5f4f     +SUBI R20 , LOW ( - 1 )
0000c7 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
0000c8 cff2      	RJMP _0x15
                 _0x16:
                 ; 0000 003B 
                 ; 0000 003C 
                 ; 0000 003D                 }
                 ; 0000 003E                 delay_ms(300);
                 _0x13:
0000c9 e2ac      	LDI  R26,LOW(300)
0000ca e0b1      	LDI  R27,HIGH(300)
0000cb 940e 0191 	CALL _delay_ms
                 ; 0000 003F                 lcd_clear();
0000cd d049      	RCALL _lcd_clear
                 ; 0000 0040             }
                +
0000ce 5001     +SUBI R16 , LOW ( 1 )
0000cf 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
0000d0 cfc5      	RJMP _0xB
                 _0xC:
                 ; 0000 0041         }
                +
0000d1 5f2f     +SUBI R18 , LOW ( - 1 )
0000d2 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0000d3 cfbb      	RJMP _0x8
                 _0x9:
                 ; 0000 0042 
                 ; 0000 0043         for(i = 0; i <= 16; i++){
                +
0000d4 e000     +LDI R16 , LOW ( 0 )
0000d5 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x18:
                +
0000d6 3101     +CPI R16 , LOW ( 17 )
0000d7 e0e0     +LDI R30 , HIGH ( 17 )
0000d8 071e     +CPC R17 , R30
                 	__CPWRN 16,17,17
0000d9 f474      	BRGE _0x19
                 ; 0000 0044             lcd_clear();
0000da d03c      	RCALL _lcd_clear
                 ; 0000 0045             lcd_gotoxy(i,0);
0000db 930a      	ST   -Y,R16
0000dc e0a0      	LDI  R26,LOW(0)
0000dd d02c      	RCALL _lcd_gotoxy
                 ; 0000 0046             lcd_putsf("Reza");
                +
0000de e7a8     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000df e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000e0 d057      	RCALL _lcd_putsf
                 ; 0000 0047             delay_ms(500);
0000e1 efa4      	LDI  R26,LOW(500)
0000e2 e0b1      	LDI  R27,HIGH(500)
0000e3 940e 0191 	CALL _delay_ms
                 ; 0000 0048         }
                +
0000e5 5f0f     +SUBI R16 , LOW ( - 1 )
0000e6 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000e7 cfee      	RJMP _0x18
                 _0x19:
                 ; 0000 0049       }
0000e8 cfa4      	RJMP _0x4
                 ; 0000 004A }
                 _0x1A:
0000e9 cfff      	RJMP _0x1A
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000ea 93aa      	ST   -Y,R26
0000eb b3e2      	IN   R30,0x12
0000ec 70ef      	ANDI R30,LOW(0xF)
0000ed 2fae      	MOV  R26,R30
0000ee 81e8      	LD   R30,Y
0000ef 7fe0      	ANDI R30,LOW(0xF0)
0000f0 2bea      	OR   R30,R26
0000f1 bbe2      	OUT  0x12,R30
                +
0000f2 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0000f3 958a     +DEC R24
0000f4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0000f5 9a92      	SBI  0x12,2
                +
0000f6 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0000f7 958a     +DEC R24
0000f8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0000f9 9892      	CBI  0x12,2
                +
0000fa e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0000fb 958a     +DEC R24
0000fc f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0000fd c078      	RJMP _0x20C0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000fe 93aa      	ST   -Y,R26
0000ff 81a8      	LD   R26,Y
000100 dfe9      	RCALL __lcd_write_nibble_G100
000101 81e8          ld    r30,y
000102 95e2          swap  r30
000103 83e8          st    y,r30
000104 81a8      	LD   R26,Y
000105 dfe4      	RCALL __lcd_write_nibble_G100
                +
000106 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
000107 958a     +DEC R24
000108 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
000109 c06c      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00010a 93aa      	ST   -Y,R26
00010b 81e8      	LD   R30,Y
00010c e0f0      	LDI  R31,0
00010d 5ae0      	SUBI R30,LOW(-__base_y_G100)
00010e 4ffd      	SBCI R31,HIGH(-__base_y_G100)
00010f 81e0      	LD   R30,Z
000110 81a9      	LDD  R26,Y+1
000111 0fae      	ADD  R26,R30
000112 dfeb      	RCALL __lcd_write_data
000113 8059      	LDD  R5,Y+1
000114 8048      	LDD  R4,Y+0
000115 9622      	ADIW R28,2
000116 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000117 e0a2      	LDI  R26,LOW(2)
000118 940e 0184 	CALL SUBOPT_0x2
00011a e0ac      	LDI  R26,LOW(12)
00011b dfe2      	RCALL __lcd_write_data
00011c e0a1      	LDI  R26,LOW(1)
00011d 940e 0184 	CALL SUBOPT_0x2
00011f e0e0      	LDI  R30,LOW(0)
000120 2e4e      	MOV  R4,R30
000121 2e5e      	MOV  R5,R30
000122 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000123 93aa      	ST   -Y,R26
000124 81a8      	LD   R26,Y
000125 30aa      	CPI  R26,LOW(0xA)
000126 f011      	BREQ _0x2000005
000127 1457      	CP   R5,R7
000128 f048      	BRLO _0x2000004
                 _0x2000005:
000129 e0e0      	LDI  R30,LOW(0)
00012a 93ea      	ST   -Y,R30
00012b 9443      	INC  R4
00012c 2da4      	MOV  R26,R4
00012d dfdc      	RCALL _lcd_gotoxy
00012e 81a8      	LD   R26,Y
00012f 30aa      	CPI  R26,LOW(0xA)
000130 f409      	BRNE _0x2000007
000131 c044      	RJMP _0x20C0001
                 _0x2000007:
                 _0x2000004:
000132 9453      	INC  R5
000133 9a90      	SBI  0x12,0
000134 81a8      	LD   R26,Y
000135 dfc8      	RCALL __lcd_write_data
000136 9890      	CBI  0x12,0
000137 c03e      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000138 93ba      	ST   -Y,R27
000139 93aa      	ST   -Y,R26
00013a 931a      	ST   -Y,R17
                 _0x200000B:
00013b 81e9      	LDD  R30,Y+1
00013c 81fa      	LDD  R31,Y+1+1
00013d 9631      	ADIW R30,1
00013e 83e9      	STD  Y+1,R30
00013f 83fa      	STD  Y+1+1,R31
000140 9731      	SBIW R30,1
000141 91e4      	LPM  R30,Z
000142 2f1e      	MOV  R17,R30
000143 30e0      	CPI  R30,0
000144 f019      	BREQ _0x200000D
000145 2fa1      	MOV  R26,R17
000146 dfdc      	RCALL _lcd_putchar
000147 cff3      	RJMP _0x200000B
                 _0x200000D:
000148 8118      	LDD  R17,Y+0
000149 9623      	ADIW R28,3
00014a 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00014b 93aa      	ST   -Y,R26
00014c b3e1      	IN   R30,0x11
00014d 6fe0      	ORI  R30,LOW(0xF0)
00014e bbe1      	OUT  0x11,R30
00014f 9a8a      	SBI  0x11,2
000150 9a88      	SBI  0x11,0
000151 9a89      	SBI  0x11,1
000152 9892      	CBI  0x12,2
000153 9890      	CBI  0x12,0
000154 9891      	CBI  0x12,1
000155 8078      	LDD  R7,Y+0
000156 81e8      	LD   R30,Y
000157 58e0      	SUBI R30,-LOW(128)
                +
000158 93e0 0262+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00015a 81e8      	LD   R30,Y
00015b 54e0      	SUBI R30,-LOW(192)
                +
00015c 93e0 0263+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00015e e1a4      	LDI  R26,LOW(20)
00015f e0b0      	LDI  R27,0
000160 940e 0191 	CALL _delay_ms
000162 940e 018a 	CALL SUBOPT_0x3
000164 940e 018a 	CALL SUBOPT_0x3
000166 940e 018a 	CALL SUBOPT_0x3
000168 e2a0      	LDI  R26,LOW(32)
000169 df80      	RCALL __lcd_write_nibble_G100
                +
00016a e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00016b 958a     +DEC R24
00016c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00016d e2a8      	LDI  R26,LOW(40)
00016e df8f      	RCALL __lcd_write_data
00016f e0a4      	LDI  R26,LOW(4)
000170 df8d      	RCALL __lcd_write_data
000171 e8a5      	LDI  R26,LOW(133)
000172 df8b      	RCALL __lcd_write_data
000173 e0a6      	LDI  R26,LOW(6)
000174 df89      	RCALL __lcd_write_data
000175 dfa1      	RCALL _lcd_clear
                 _0x20C0001:
000176 9621      	ADIW R28,1
000177 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G100:
000260           	.BYTE 0x4
                 __seed_G102:
000264           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000178 e0e2      	LDI  R30,LOW(2)
000179 e0f0      	LDI  R31,HIGH(2)
00017a 940e 01b2 	CALL __MODW21
00017c 9730      	SBIW R30,0
00017d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
00017e 01de      	MOVW R26,R28
00017f 0fa2      	ADD  R26,R18
000180 1fb3      	ADC  R27,R19
000181 91ac      	LD   R26,X
000182 940c 0123 	JMP  _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000184 940e 00fe 	CALL __lcd_write_data
000186 e0a3      	LDI  R26,LOW(3)
000187 e0b0      	LDI  R27,0
000188 940c 0191 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
00018a e3a0      	LDI  R26,LOW(48)
00018b 940e 00ea 	CALL __lcd_write_nibble_G100
                +
00018d e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00018e 958a     +DEC R24
00018f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000190 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000191 9610      	adiw r26,0
000192 f039      	breq __delay_ms1
                 __delay_ms0:
000193 95a8      	wdr
                +
000194 ef8a     +LDI R24 , LOW ( 0xFA )
000195 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000196 9701     +SBIW R24 , 1
000197 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000198 9711      	sbiw r26,1
000199 f7c9      	brne __delay_ms0
                 __delay_ms1:
00019a 9508      	ret
                 
                 __ANEGW1:
00019b 95f1      	NEG  R31
00019c 95e1      	NEG  R30
00019d 40f0      	SBCI R31,0
00019e 9508      	RET
                 
                 __DIVW21U:
00019f 2400      	CLR  R0
0001a0 2411      	CLR  R1
0001a1 e190      	LDI  R25,16
                 __DIVW21U1:
0001a2 0faa      	LSL  R26
0001a3 1fbb      	ROL  R27
0001a4 1c00      	ROL  R0
0001a5 1c11      	ROL  R1
0001a6 1a0e      	SUB  R0,R30
0001a7 0a1f      	SBC  R1,R31
0001a8 f418      	BRCC __DIVW21U2
0001a9 0e0e      	ADD  R0,R30
0001aa 1e1f      	ADC  R1,R31
0001ab c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001ac 60a1      	SBR  R26,1
                 __DIVW21U3:
0001ad 959a      	DEC  R25
0001ae f799      	BRNE __DIVW21U1
0001af 01fd      	MOVW R30,R26
0001b0 01d0      	MOVW R26,R0
0001b1 9508      	RET
                 
                 __MODW21:
0001b2 94e8      	CLT
0001b3 ffb7      	SBRS R27,7
0001b4 c004      	RJMP __MODW211
0001b5 95a0      	COM  R26
0001b6 95b0      	COM  R27
0001b7 9611      	ADIW R26,1
0001b8 9468      	SET
                 __MODW211:
0001b9 fdf7      	SBRC R31,7
0001ba dfe0      	RCALL __ANEGW1
0001bb dfe3      	RCALL __DIVW21U
0001bc 01fd      	MOVW R30,R26
0001bd f40e      	BRTC __MODW212
0001be dfdc      	RCALL __ANEGW1
                 __MODW212:
0001bf 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
0001c0 0fac      	ADD  R26,R28
0001c1 1fbd      	ADC  R27,R29
                 __INITLOC0:
0001c2 9005      	LPM  R0,Z+
0001c3 920d      	ST   X+,R0
0001c4 958a      	DEC  R24
0001c5 f7e1      	BRNE __INITLOC0
0001c6 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  13 r1 :   5 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  13 r17:  10 r18:   8 r19:   7 r20:   5 r21:   4 r22:   2 r23:   0 
r24:  23 r25:   5 r26:  63 r27:  15 r28:   8 r29:   2 r30:  70 r31:  14 
x  :   6 y  :  35 z  :  10 
Registers used: 23 out of 35 (65.7%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   5 
adiw  :   6 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   5 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   2 brmi  :   0 brne  :  17 brpl  :   0 brsh  :   0 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  17 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   3 cpc   :   4 cpi   :   5 cpse  :   0 dec   :   9 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   2 jmp   :  24 ld    :  13 ldd   :   7 ldi   :  68 
lds   :   0 lpm   :  10 lsl   :   1 lsr   :   0 mov   :   7 movw  :  11 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   1 out   :  16 pop   :   0 push  :   0 rcall :  25 ret   :  11 
reti  :   0 rjmp  :  18 rol   :   3 ror   :   0 sbc   :   1 sbci  :   6 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   8 sbr   :   1 sbrc  :   1 
sbrs  :   1 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  20 std   :   2 sts   :   2 sub   :   1 subi  :   7 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 54 out of 116 (46.6%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00038e    840     70    910   32768   2.8%
[.dseg] 0x000060 0x000268      0      8      8    2048   0.4%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 7 warnings
